name: CD - Publish to NuGet

on:
  push:
    branches:
      - main # 當 main 分支有新 commit 時觸發
  release:
    types: [published]
  workflow_dispatch:  # 允許手動觸發

permissions:
  contents: write
  packages: write

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'ReplaceText/ReplaceText.csproj'
  PACKAGE_OUTPUT_DIR: 'ReplaceText/nupkg'

jobs:
  publish:
    name: Build and Publish to NuGet
    runs-on: ubuntu-latest
    # Expose whether this job created a Release and the resolved version so
    # downstream jobs can act (e.g. build platform binaries and attach
    # release assets) either when this workflow created the Release or when
    # the workflow is triggered by a release event.
    outputs:
      release_created: ${{ steps.set_release_created.outputs.release_created }}
      version: ${{ steps.get_version.outputs.VERSION }}

    steps:
    - name: 📥 Checkout 程式碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 完整的 Git 歷史記錄，用於版本號生成

    - name: 🔧 設定 .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📝 取得版本號
      id: get_version
      run: |
        # For pushes to main or when manually triggered, read <Version> from the csproj
        if [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" || "$GITHUB_REF" == "refs/heads/main" ]]; then
          VERSION=$(grep -Po '(?<=<Version>).*?(?=</Version>)' "$PROJECT_PATH" || true)
          if [ -z "$VERSION" ]; then
            echo "❌ 無法從 $PROJECT_PATH 取得 <Version>，請在 csproj 中設定 <Version>。" >&2
            exit 1
          fi
        else
          # Fallback developer build version for other refs
          VERSION="1.0.0-dev.${{ github.run_number }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 版本號: $VERSION"

    - name: 🔨 還原相依套件
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: 🔎 檢查 NuGet 是否已存在此版本
      id: check_nuget
      run: |
        PACKAGE_ID="Duotify.ReplaceText"
        PACKAGE_ID_LOWER=$(echo "$PACKAGE_ID" | tr '[:upper:]' '[:lower:]')
        INDEX_URL="https://api.nuget.org/v3-flatcontainer/${PACKAGE_ID_LOWER}/index.json"
        echo "查詢 NuGet: $INDEX_URL"
        RESP=$(curl -sS "$INDEX_URL" || true)
        if [ -z "$RESP" ]; then
          # 如果找不到 index.json，代表此套件 ID 尚未上傳過
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "🔔 NuGet 上找不到套件 $PACKAGE_ID，將會發佈新版本。"
          exit 0
        fi
        # 檢查版本是否在版本清單中
        if echo "$RESP" | grep -q "\"${{ steps.get_version.outputs.VERSION }}\""; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "ℹ️ 版本 ${{ steps.get_version.outputs.VERSION }} 已存在於 NuGet Gallery。將跳過發佈與建立 Release。"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "🔔 版本 ${{ steps.get_version.outputs.VERSION }} 不在 NuGet Gallery，將發佈新版並建立 Release。"
        fi

    - name: 🏗️ 建構專案
      run: dotnet build ${{ env.PROJECT_PATH }} -c Release --no-restore

    - name: 📦 打包 NuGet 套件 (僅在 NuGet 尚未有此版本時執行)
      id: pack
      if: steps.check_nuget.outputs.exists == 'false'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          -c Release \
          --no-build \
          --no-restore \
          -o ${{ env.PACKAGE_OUTPUT_DIR }} \
          -p:PackageVersion=${{ steps.get_version.outputs.VERSION }}
        # 記錄產生的 nupkg 路徑，供後續 push 與上傳到 Release 使用
        NUPKG_PATH=$(ls ${{ env.PACKAGE_OUTPUT_DIR }}/*.nupkg | head -n1)
        echo "NUPKG_PATH=$NUPKG_PATH" >> $GITHUB_OUTPUT

    - name: 📋 列出套件內容 (僅在 NuGet 尚未有此版本時執行)
      if: steps.check_nuget.outputs.exists == 'false'
      run: |
        echo "🔍 已產生的 NuGet 套件："
        ls -lh ${{ env.PACKAGE_OUTPUT_DIR }}

    - name: ✅ 驗證套件內容 (僅在 NuGet 尚未有此版本時執行)
      if: steps.check_nuget.outputs.exists == 'false'
      run: |
        echo "🔍 驗證 NuGet 套件內容..."
        for nupkg in ${{ env.PACKAGE_OUTPUT_DIR }}/*.nupkg; do
          echo "📦 套件: $(basename $nupkg)"
          unzip -l "$nupkg" | grep -E '\.(dll|exe|pdb)$' || true
        done

    - name: 🚀 發佈到 NuGet.org (僅在 NuGet 尚未有此版本時執行)
      if: steps.check_nuget.outputs.exists == 'false'
      run: |
        echo "準備將套件推送到 NuGet.org：${{ steps.pack.outputs.NUPKG_PATH }}"
        dotnet nuget push "${{ steps.pack.outputs.NUPKG_PATH }}" \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: 📤 上傳套件作為 Artifacts (僅在 NuGet 尚未有此版本時執行)
      if: steps.check_nuget.outputs.exists == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-${{ steps.get_version.outputs.VERSION }}
        path: ${{ steps.pack.outputs.NUPKG_PATH }}
        retention-days: 30

    - name: 📝 建立 Release 並上傳 nupkg（僅在 NuGet 尚未有此版本時執行）
      if: steps.check_nuget.outputs.exists == 'false'
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: v${{ steps.get_version.outputs.VERSION }}
        name: Duotify.ReplaceText ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## 🎉 Duotify.ReplaceText ${{ steps.get_version.outputs.VERSION }} 已發佈！

          ### 安裝方式

          ```bash
          dotnet tool install --global Duotify.ReplaceText
          ```

          ### 更新方式

          ```bash
          dotnet tool update --global Duotify.ReplaceText
          ```

          ### 📦 套件連結

          - [NuGet Gallery](https://www.nuget.org/packages/Duotify.ReplaceText/${{ steps.get_version.outputs.VERSION }})
          - [安裝指南](https://github.com/doggy8088/ReplaceText/blob/main/docs/INSTALL.md)

          ### 📚 說明文件

          完整說明文件請參閱 [README.md](https://github.com/doggy8088/ReplaceText/blob/main/README.md)
        draft: false
        prerelease: false
        artifacts: ${{ steps.pack.outputs.NUPKG_PATH }}

    - name: ✅ 發佈完成 (僅在 NuGet 尚未有此版本時執行)
      if: steps.check_nuget.outputs.exists == 'false'
      run: |
        echo "✅ 套件已成功發佈到 NuGet.org"
        echo "📦 版本: ${{ steps.get_version.outputs.VERSION }}"
        echo "🔗 套件連結: https://www.nuget.org/packages/Duotify.ReplaceText/${{ steps.get_version.outputs.VERSION }}"

  release_builds:
    name: Build and Release Platform Binaries
    runs-on: windows-latest
    needs: publish
    # Run this job either when the workflow was triggered by a GitHub Release
    # event, or when the publish job created a Release as part of this run.
    if: ${{ github.event_name == 'release' || needs.publish.outputs.release_created == 'true' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }} --no-restore --configuration Release

    - name: Publish for Windows x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/win-x64

    - name: Publish for Windows x86
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x86 --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/win-x86

    - name: Publish for Linux x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/linux-x64

    - name: Publish for macOS x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r osx-x64 --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/osx-x64

    - name: Publish for macOS ARM64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r osx-arm64 --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o ./publish/osx-arm64

    - name: Create ZIP archives
      run: |
        Compress-Archive -Path ./publish/win-x64/* -DestinationPath ./ReplaceText-win-x64.zip
        Compress-Archive -Path ./publish/win-x86/* -DestinationPath ./ReplaceText-win-x86.zip
        Compress-Archive -Path ./publish/linux-x64/* -DestinationPath ./ReplaceText-linux-x64.zip
        Compress-Archive -Path ./publish/osx-x64/* -DestinationPath ./ReplaceText-osx-x64.zip
        Compress-Archive -Path ./publish/osx-arm64/* -DestinationPath ./ReplaceText-osx-arm64.zip

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        # Determine which tag to target: when triggered by a release event
        # use the release's tag name; otherwise use the tag we created in
        # the publish job (v{version}).
        tag_name: ${{ github.event_name == 'release' && github.event.release.tag_name || format('v{0}', needs.publish.outputs.version) }}
        files: |
          ReplaceText-win-x64.zip
          ReplaceText-win-x86.zip
          ReplaceText-linux-x64.zip
          ReplaceText-osx-x64.zip
          ReplaceText-osx-arm64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # When we created a Release in this job, mark a job-level output so
    # other jobs can detect it. This step only runs when the check determined
    # the version did not already exist and we therefore created the Release.
    - name: "🔖 設定 release_created 輸出 (讓後續 job 知道已建立 Release)"
      id: set_release_created
      if: steps.check_nuget.outputs.exists == 'false'
      run: |
        echo "release_created=true" >> $GITHUB_OUTPUT
